// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addCheckboxFieldToTask = `-- name: AddCheckboxFieldToTask :one
INSERT INTO filled_checkbox_fields (
    task_id,
    idx,
    selected_options 
) VALUES (
    $1, $2, $3
) RETURNING
    task_id,
    idx,
    selected_options
`

type AddCheckboxFieldToTaskParams struct {
	TaskID          int64    `json:"task_id"`
	Idx             int32    `json:"idx"`
	SelectedOptions []string `json:"selected_options"`
}

func (q *Queries) AddCheckboxFieldToTask(ctx context.Context, arg AddCheckboxFieldToTaskParams) (*FilledCheckboxField, error) {
	row := q.db.QueryRow(ctx, addCheckboxFieldToTask, arg.TaskID, arg.Idx, arg.SelectedOptions)
	var i FilledCheckboxField
	err := row.Scan(&i.TaskID, &i.Idx, &i.SelectedOptions)
	return &i, err
}

const addFilledFieldToTask = `-- name: AddFilledFieldToTask :one
INSERT INTO filled_form_fields (
    task_id,
    idx,
    ftype,
    filled
) VALUES (
    $1, $2, $3, $4
) RETURNING
    task_id,
    idx,
    ftype,
    filled
`

type AddFilledFieldToTaskParams struct {
	TaskID int64     `json:"task_id"`
	Idx    int32     `json:"idx"`
	Ftype  FieldType `json:"ftype"`
	Filled bool      `json:"filled"`
}

func (q *Queries) AddFilledFieldToTask(ctx context.Context, arg AddFilledFieldToTaskParams) (*FilledFormField, error) {
	row := q.db.QueryRow(ctx, addFilledFieldToTask,
		arg.TaskID,
		arg.Idx,
		arg.Ftype,
		arg.Filled,
	)
	var i FilledFormField
	err := row.Scan(
		&i.TaskID,
		&i.Idx,
		&i.Ftype,
		&i.Filled,
	)
	return &i, err
}

const addFormToTask = `-- name: AddFormToTask :one
INSERT INTO filled_forms (
    task_id,
    form_version_id
) VALUES (
    $1,
    $2
) RETURNING
    task_id,
    form_version_id
`

type AddFormToTaskParams struct {
	TaskID        int64  `json:"task_id"`
	FormVersionID *int64 `json:"form_version_id"`
}

func (q *Queries) AddFormToTask(ctx context.Context, arg AddFormToTaskParams) (*FilledForm, error) {
	row := q.db.QueryRow(ctx, addFormToTask, arg.TaskID, arg.FormVersionID)
	var i FilledForm
	err := row.Scan(&i.TaskID, &i.FormVersionID)
	return &i, err
}

const addRadioFieldToTask = `-- name: AddRadioFieldToTask :one
INSERT INTO filled_radio_fields (
    task_id,
    idx,
    selected_option
) VALUES (
    $1, $2, $3
) RETURNING
    task_id,
    idx,
    selected_option
`

type AddRadioFieldToTaskParams struct {
	TaskID         int64   `json:"task_id"`
	Idx            int32   `json:"idx"`
	SelectedOption *string `json:"selected_option"`
}

func (q *Queries) AddRadioFieldToTask(ctx context.Context, arg AddRadioFieldToTaskParams) (*FilledRadioField, error) {
	row := q.db.QueryRow(ctx, addRadioFieldToTask, arg.TaskID, arg.Idx, arg.SelectedOption)
	var i FilledRadioField
	err := row.Scan(&i.TaskID, &i.Idx, &i.SelectedOption)
	return &i, err
}

const addTextFieldToTask = `-- name: AddTextFieldToTask :one
INSERT INTO filled_text_fields (
    task_id,
    idx,
    content
) VALUES (
    $1, $2, $3
) RETURNING
    task_id,
    idx,
    content
`

type AddTextFieldToTaskParams struct {
	TaskID  int64   `json:"task_id"`
	Idx     int32   `json:"idx"`
	Content *string `json:"content"`
}

func (q *Queries) AddTextFieldToTask(ctx context.Context, arg AddTextFieldToTaskParams) (*FilledTextField, error) {
	row := q.db.QueryRow(ctx, addTextFieldToTask, arg.TaskID, arg.Idx, arg.Content)
	var i FilledTextField
	err := row.Scan(&i.TaskID, &i.Idx, &i.Content)
	return &i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    client_id,
    slug
) VALUES (
    $1,
    $2
) RETURNING
    id,
    client_id,
    status,
    slug,
    created_at
`

type CreateTaskParams struct {
	ClientID pgtype.UUID `json:"client_id"`
	Slug     string      `json:"slug"`
}

type CreateTaskRow struct {
	ID        int64              `json:"id"`
	ClientID  pgtype.UUID        `json:"client_id"`
	Status    TaskStatus         `json:"status"`
	Slug      string             `json:"slug"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (*CreateTaskRow, error) {
	row := q.db.QueryRow(ctx, createTask, arg.ClientID, arg.Slug)
	var i CreateTaskRow
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.Status,
		&i.Slug,
		&i.CreatedAt,
	)
	return &i, err
}

const getClientTasks = `-- name: GetClientTasks :many
SELECT
    id,
    client_id,
    status,
    slug,
    created_at
FROM
    tasks
WHERE
    client_id = $1
`

type GetClientTasksRow struct {
	ID        int64              `json:"id"`
	ClientID  pgtype.UUID        `json:"client_id"`
	Status    TaskStatus         `json:"status"`
	Slug      string             `json:"slug"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetClientTasks(ctx context.Context, clientID pgtype.UUID) ([]*GetClientTasksRow, error) {
	rows, err := q.db.Query(ctx, getClientTasks, clientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetClientTasksRow
	for rows.Next() {
		var i GetClientTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.Status,
			&i.Slug,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServiceTasks = `-- name: GetServiceTasks :many
SELECT
    tasks.id,
    tasks.client_id,
    status,
    tasks.slug,
    tasks.created_at
FROM
    tasks
    INNER JOIN filled_forms ON filled_forms.task_id = tasks.id
    INNER JOIN form_versions ON filled_forms.form_version_id = form_versions.id
WHERE
    form_versions.form_id = $1
`

type GetServiceTasksRow struct {
	ID        int64              `json:"id"`
	ClientID  pgtype.UUID        `json:"client_id"`
	Status    TaskStatus         `json:"status"`
	Slug      string             `json:"slug"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetServiceTasks(ctx context.Context, formID int64) ([]*GetServiceTasksRow, error) {
	rows, err := q.db.Query(ctx, getServiceTasks, formID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetServiceTasksRow
	for rows.Next() {
		var i GetServiceTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.Status,
			&i.Slug,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
